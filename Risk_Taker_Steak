import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Question 2 - Do risk takers eat rarer steaks?

pd.set_option('display.max_rows', None)
steak_data = pd.read_csv("steak-risk-survey.csv")

LOTTERY_Q = 'Risk lottery (A) or safe lottery (B)'
SMOKE_Q = 'Do you ever smoke cigarettes?'
DRINK_Q = 'Do you ever drink alcohol?'
GAMBLE_Q = 'Do you ever gamble?'
SKYDIVING_Q = 'Have you ever been skydiving?'
DRIVE_Q = 'Have you ever drove above limit?'
CHEAT_Q = 'Have you ever cheated?'
LOT_A = "Lottery A"
LOT_B = "Lottery B"
STEAK_Q = 'Steak level?'
RISK_SCORE = 'Score Risk Taker'


def changing_names_columns(steak_data):
    updated_data = steak_data.rename(columns={'Consider the following hypothetical situations: <br>In Lottery A, you have a '
                                          '50% chance of success, with a payout of $100. <br>In Lottery B, you have a 90% '
                                          'chance of success, with a payout of $20. <br><br>Assuming you have $10 to bet, '
                                          'would you play Lottery A or Lottery B?': LOTTERY_Q,
                                          'Do you ever drive above the speed limit?':DRIVE_Q,
                                          'Have you ever cheated on your significant other?': CHEAT_Q,
                                          'How do you like your steak prepared?': STEAK_Q})
    return updated_data

def replace_score_values_columns(updated_data):
    updated_data.loc[updated_data[LOTTERY_Q] == LOT_A, LOTTERY_Q] = 1
    updated_data.loc[updated_data[LOTTERY_Q] == LOT_B, LOTTERY_Q] = 0
    updated_data.loc[updated_data[SMOKE_Q] == "Yes", SMOKE_Q] = 1
    updated_data.loc[updated_data[SMOKE_Q] == "No", SMOKE_Q] = 0
    updated_data.loc[updated_data[DRINK_Q] == "Yes", DRINK_Q] = 1
    updated_data.loc[updated_data[DRINK_Q] == "No", DRINK_Q] = 0
    updated_data.loc[updated_data[GAMBLE_Q] == "Yes", GAMBLE_Q] = 1
    updated_data.loc[updated_data[GAMBLE_Q] == "No", GAMBLE_Q] = 0
    updated_data.loc[updated_data[SKYDIVING_Q] == "Yes", SKYDIVING_Q] = 1
    updated_data.loc[updated_data[SKYDIVING_Q] == "No", SKYDIVING_Q] = 0
    updated_data.loc[updated_data[DRIVE_Q] == "Yes", DRIVE_Q] = 1
    updated_data.loc[updated_data[DRIVE_Q] == "No", DRIVE_Q] = 0
    updated_data.loc[updated_data[CHEAT_Q] == "Yes", CHEAT_Q] = 1
    updated_data.loc[updated_data[CHEAT_Q] == "No", CHEAT_Q] = 0
    return updated_data


def sum_score_risk(updated_data):
    updated_data[RISK_SCORE] = updated_data[LOTTERY_Q] + updated_data[SMOKE_Q] + updated_data[DRINK_Q]\
                               + updated_data[GAMBLE_Q] + updated_data[SKYDIVING_Q] + updated_data[DRIVE_Q] + updated_data[CHEAT_Q]
    return updated_data


def remove_nan_rows(updated_data):
    no_nan = updated_data[~updated_data['Score Risk Taker'].isnull()]
    no_string = no_nan[~pd.to_numeric(no_nan['Score Risk Taker'], errors='coerce').isnull()]
    clean_steak_col = (no_string[~no_string[STEAK_Q].isnull()])
    return clean_steak_col

def plot_risk_takers_with_type_steak(updated_data):
    risk_steak_plot = sns.countplot(x = STEAK_Q, hue= RISK_SCORE, data=updated_data,
                                    order = ["Rare", "Medium rare", "Medium", "Medium Well", "Well"])
    for p in risk_steak_plot.patches:
        risk_steak_plot.annotate(format(p.get_height(),'.0f'),
                       (p.get_x() + p.get_width() / 2., p.get_height()),
                       ha='center', va='center',
                       xytext=(0, 9),
                       textcoords='offset points', color='blue')
    plt.title('Risk takers preferences towards steak', fontsize=18)
    plt.xlabel('Steak level', fontsize=14)
    plt.ylabel('Amount of people', fontsize=14)
    plt.show()


def main_risk_versus_steak_type():
    steak_data = pd.read_csv("steak-risk-survey.csv")
    updated_steak_data = changing_names_columns(steak_data)
    updated_data_with_score = replace_score_values_columns(updated_steak_data)
    updated_data_with_score_column = sum_score_risk(updated_data_with_score)
    updated_data_without_nan = remove_nan_rows(updated_data_with_score_column)
    plot_risk_takers_with_type_steak(updated_data_without_nan)

main_risk_versus_steak_type()

